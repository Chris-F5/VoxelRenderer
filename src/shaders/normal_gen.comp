#version 450

#include "chunk.glsl"

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform Constants {
    uint thisChunk;
    uint CHUNK_SCALE;
    uint CHUNK_VOX_COUNT;
};

layout(binding = 0) buffer VoxMask {
    uint voxMaskData[];
};
layout(binding = 1) buffer Normals {
    uint normalData[];
};
layout(binding = 2) buffer Neighbours {
    uint neighboursData[];
};

uint getNeighbour(uint chunk, uint neighbourDir) {
    return neighboursData[chunk * 6 + neighbourDir];
}

uint testVox(uint chunk, uint index) {
    return voxMaskData[index / 32 + (chunk * CHUNK_VOX_COUNT / 32)] & (1 << index % 32);
}

void setNormal(uint id, uint normal) {
    uint shiftedNormal = normal << (id % 4) * 8;
    atomicOr(normalData[id / 4 + (thisChunk * CHUNK_VOX_COUNT / 4)], shiftedNormal);
}

uint xyzToIndex(uint x, uint y, uint z) {
    return x
        + y * CHUNK_SCALE
        + z * CHUNK_SCALE * CHUNK_SCALE;
}

void main() {
    int x = int(gl_WorkGroupID.x);
    int y = int(gl_WorkGroupID.y);
    int z = int(gl_WorkGroupID.z);

    uint thisId = xyzToIndex(x, y, z);

    vec3 preciseNormal = vec3(0.0, 0.0, 0.0);

    uint xChunk, xyChunk, xyzChunk;
    int cx, cy, cz;
    int ccx, ccy, ccz;
    for(cx = x - 1; cx <= x + 1; cx++) {
        if(cx == -1) {
            xChunk = getNeighbour(thisChunk, NEIGHBOUR_NEGATIVE_X);
            ccx = int(CHUNK_SCALE) - 1;
        } else if(cx == int(CHUNK_SCALE)) {
            xChunk = getNeighbour(thisChunk, NEIGHBOUR_POSITIVE_X);
            ccx = 0;
        } else {
            xChunk = thisChunk;
            ccx = cx;
        }
        if(xChunk == NEIGHBOUR_EMPTY) {
            continue;
        }
        for(cy = y - 1; cy <= y + 1; cy++) {
            if(cy == -1) {
                xyChunk = getNeighbour(xChunk, NEIGHBOUR_NEGATIVE_Y);
                ccy = int(CHUNK_SCALE) - 1;
            } else if(cy == int(CHUNK_SCALE)) {
                xyChunk = getNeighbour(xChunk, NEIGHBOUR_POSITIVE_Y);
                ccy = 0;
            } else {
                xyChunk = xChunk;
                ccy = cy;
            }
            if(xyChunk == NEIGHBOUR_EMPTY) {
                continue;
            }
            for(cz = z - 1; cz <= z + 1; cz++) {
                if(cz == -1) {
                    xyzChunk = getNeighbour(xyChunk, NEIGHBOUR_NEGATIVE_Z);
                    ccz = int(CHUNK_SCALE) - 1;
                } else if(cz == int(CHUNK_SCALE)) {
                    xyzChunk = getNeighbour(xyChunk, NEIGHBOUR_POSITIVE_Z);
                    ccz = 0;
                } else {
                    xyzChunk = xyChunk;
                    ccz = cz;
                }
                if(xyzChunk == NEIGHBOUR_EMPTY) {
                    continue;
                }
                uint ccid = xyzToIndex(ccx, ccy, ccz);
                if (testVox(xyzChunk, ccid) != 0) {
                    preciseNormal -= vec3(cx - x, cy - y, cz - z);
                }
            }
        }
    }

    if (preciseNormal.y > 0) {
        setNormal(thisId, NORMAL_Y_POS);
    } else {
        setNormal(thisId, NORMAL_Y_NEG);
    }
}
