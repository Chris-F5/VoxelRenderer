#version 450

#include "chunk.glsl"

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform Constants {
    uint thisChunk;
    uint CHUNK_SCALE;
    uint CHUNK_VOX_COUNT;
};

layout(binding = 0) buffer Brightness {
    uint brightnessData[];
};
layout(binding = 1) buffer VoxMask {
    uint voxMaskData[];
};
layout(binding = 2) buffer Neighbours {
    uint neighboursData[];
};
layout(binding = 3) buffer Normals {
    uint normalData[];
};

void setBrightness(uint chunk, uint index, uint brightness)
{
    brightnessData[index + (chunk * CHUNK_VOX_COUNT)] = brightness * 256 * 256 * 256;
}

uint getQuantizedNormal(uint chunk, uint index)
{
    return (normalData[index / 4 + (chunk * CHUNK_VOX_COUNT / 4)] >> (index % 4) * 8) & 0xFF;
}

uint testVox(uint chunk, uint index)
{
    return voxMaskData[index / 32 + (chunk * CHUNK_VOX_COUNT / 32)] & (1 << index % 32);
}

uint getNeighbour(uint chunk, uint neighbourDir)
{
    return neighboursData[chunk * 6 + neighbourDir];
}

uint xyzToIndex(uint x, uint y, uint z)
{
    return x
        + y * CHUNK_SCALE
        + z * CHUNK_SCALE * CHUNK_SCALE;
}

int dx = 1;
int dy = 2;

void main() {
    uint x = gl_WorkGroupID.x;
    uint y = gl_WorkGroupID.y;
    uint z = gl_WorkGroupID.z;

    uint id = xyzToIndex(x, y, z);

    uint checkChunk = thisChunk;

    uint t = 0;
    float v = 1;
    uint k = 0;
    uint cx = dy;
    while (t < 612) {
        if (cx >= dx) {
            cx -= dx;
            y += 1;
            if (y >= CHUNK_SCALE) { 
                y = 0;
                checkChunk = getNeighbour(checkChunk, NEIGHBOUR_POSITIVE_Y);
                if (checkChunk == NEIGHBOUR_EMPTY) {
                    break;
                }
            }
        } else {
            cx += dy;
            x += 1;
            if (x >= CHUNK_SCALE) { 
                x = 0;
                checkChunk = getNeighbour(checkChunk, NEIGHBOUR_POSITIVE_X);
                if (checkChunk == NEIGHBOUR_EMPTY) {
                    break;
                }
            }
        }

        uint checkId = xyzToIndex(x, y, z);
        if(testVox(checkChunk, checkId) != 0 && t > 1) {
            k++;
            v -= v*float(k)/float(t);
        } else {
            k = 0;
        }
        t += 1;
    }

    uint quantizedNormal = getQuantizedNormal(thisChunk, id);
    vec3 normal = normalPalette[quantizedNormal];
    vec3 lightDir = vec3(-dx, -dy, 0);
    lightDir = normalize(lightDir);
    float normalLightingCompoent = -dot(normal, lightDir);
    normalLightingCompoent = max(0, normalLightingCompoent);
    uint light = int(round(normalLightingCompoent * 255));
    setBrightness(thisChunk, id, light);

    //setBrightness(thisChunk, id, int(floor(v * 255)));
    /*
    if (normal == NORMAL_Y_POS) {
        setBrightness(thisChunk, id, 255);
    } else {
        setBrightness(thisChunk, id, 0);
    }
    */
}
